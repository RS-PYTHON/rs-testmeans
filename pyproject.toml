[project]
name = "rs-python"
authors = []
dynamic = ["version"]

requires-python = ">=3.11"

dependencies = [
    "Flask == 3.1.1",
    "Flask-HTTPAuth == 4.8.0",
    "Flask-Bcrypt == 1.0.1",
    "boto3 >= 1.38.34",
    "botocore >= 1.38.34",
    "dotenv == 0.9.9"
    ]

[project.optional-dependencies]
tests = [
    "pytest >= 8.4.0"
    ]

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.0"
pytest-cov = "^6.1.1"
pytest-mock = "^3.14.1"
black = "^25.1.0"
ruff = "^0.11.13"
mypy = "^1.16.0"
pre-commit = "^4.2.0"
flake8 = "^7.1.2"
bandit = "^1.8.3"
safety = "^3.3.0"
pylint = "^3.3.7"
flake8-pyproject = "^1.2.3"

[tool.ruff.lint.extend-per-file-ignores]
# init should be empty, doesn't need any docstrings
"__init__.py" = ["D104"]

[tool.poetry]
name = "rs-testmeans"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]
readme = "README.md"
packages = [
    { include = "src" },
    { include = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = "^3.11"
flask-bcrypt = "^1.0.1"
flask-httpauth = "^4.8.0"
requests = "^2.32.4"
botocore = "^1.38.34"
boto3 = "^1.38.34"
pytest = "^8.4.0"
pytest-cov = "^6.1.1"
pytest-mock = "^3.14.1"
black = "^25.1.0"
ruff = "^0.11.13"
mypy = "^1.16.0"
pre-commit = "^4.2.0"
tqdm = "^4.67.1"
moto = "^5.1.5"
flask-cors = "^6.0.0"
cffi = "^1.17.1"
flask = "^3.1.1"
dotenv = "^0.9.9"

[tool.poetry.group.dev]
optional = true

[tool.bandit]
skips = ["B201"]

[tool.bandit.assert_used]
skips = ['*/test_*.py', '*/conftest.py']

[tool.black]
line-length = 130

[tool.flake8]
max-line-length=130

[tool.pylint]
max-line-length=130
disable = ["duplicate-code", "missing-function-docstring", "missing-module-docstring", "too-many-branches", "too-many-locals", "too-many-return-statements", "redefined-outer-name", "unused-argument"]

[tool.pytest.ini_options]
# This is mandatory for pytest-docker
# to have a pytest.rootdir set to project.rootdir

[tool.ruff]
line-length = 130 # is it useful if not using ruff formatter ?

[tool.ruff.lint]
# F = PyFlake
# E = pycodestyle
# I = isort
# N = pep8 naming
# D = pydocstyle
# PL = pylint
select = ["F", "E", "I", "N", "D", "PL"]
ignore = ["D203", "D213"]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
